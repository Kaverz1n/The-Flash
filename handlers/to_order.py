import os

from aiogram import Router, F, Bot
from aiogram.enums import ContentType
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, LabeledPrice, PreCheckoutQuery
from aiogram.utils.media_group import MediaGroupBuilder
from aiohttp import ClientSession, InvalidURL

from database.database_handlers.orders import insert_order_data
from database.database_handlers.rates import get_course_and_commission
from database.database_handlers.users import select_profile_data, select_user_pk, increase_current_orders
from keyboards.for_profile import get_profile_keyboard
from keyboards.for_start import get_return_to_menu_keyboard
from keyboards.for_to_order import get_familiarizing_keyboard, get_start_order_keyboard, get_confirm_order_keyboard, \
    get_payment_keyboard
from states.to_order import ToOrderState

router = Router()


@router.callback_query(F.data == 'to_order')
async def to_order(callback: CallbackQuery, state: FSMContext) -> None:
    '''
    An async function to familiarize
    '''
    await state.clear()

    await callback.message.answer(
        text='–ü–µ—Ä–µ–¥ <b>–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞</b>, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å '
             '—Å —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â–µ–π <b>–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π</b>:',
        reply_markup=get_familiarizing_keyboard()
    )

    await callback.answer()


@router.callback_query(F.data == 'familiarized')
async def familiarized(callback: CallbackQuery, state: FSMContext) -> None:
    '''
    An async function to start ordering
    '''
    await state.clear()

    user_telegram_id = callback.from_user.id
    user_data = await select_profile_data(user_telegram_id)

    if not '–ù–µ —É–∫–∞–∑–∞–Ω' in tuple(user_data):
        album_builder = MediaGroupBuilder(
            caption='üì¶\u00A0–°–°–´–õ–ö–ê –ù–ê –¢–û–í–ê–†\u00A0üì¶Ô∏è\n\n'
                    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ <b>—Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä —Å POIZON (DEWU)</b>, '
                    '–∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n'
                    '<i>https://dw4.co/t/A/XXXXXXXX</i>\n\n'
                    '<i>–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è <b>—Å—Å—ã–ª–∫–∏</b>, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ '
                    '<b>–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</b> –Ω–∞ <b>—Å–∫—Ä–∏–Ω—à–æ—Ç–∞—Ö.</b></i>',
        )
        photo_url_list = [
            'https://telegra.ph/file/549a4e00bd95287cff2d2.png',
            'https://telegra.ph/file/3836e44c12a17859d3803.png',
            'https://telegra.ph/file/946bcb6282c5de5c03336.png'
        ]

        for photo_url in photo_url_list:
            album_builder.add_photo(media=photo_url)

        await callback.message.answer_media_group(
            media=album_builder.build(),
            reply_markup=get_start_order_keyboard()
        )

        await state.set_state(ToOrderState.order_url)
    else:
        await callback.message.answer(
            text='‚ùå\u00A0<b>–ü–†–û–§–ò–õ–¨ –ù–ï –ó–ê–ü–û–õ–ù–ï–ù</b>\u00A0‚ùå\n\n'
                 '–í–∞—à <b>–ø—Ä–æ—Ñ–∏–ª—å</b> –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ <b>–¥–µ–π—Å—Ç–≤–∏–π–Ω—ã–µ</b> '
                 '–¥–∞–Ω–Ω—ã–µ, –≤–µ–¥—å –æ–Ω–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–ª—è <b>–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞!</b>',
            reply_markup=get_profile_keyboard()
        )

    await callback.answer()


@router.message(ToOrderState.order_url)
async def order_url_received(message: Message, state: FSMContext) -> None:
    '''
    An async function to check the order url
    '''
    try:
        entities = message.entities or []
        user_url = [item.extract_from(message.text) for item in entities if item.type == 'url'][0]

        if not 'https://dw4.co' in user_url:
            raise InvalidURL

        async with ClientSession() as session:
            async with session.get(url=user_url) as response:
                status = response.status

        if status == 200:
            await state.update_data(order_url=user_url)

            album_builder = MediaGroupBuilder(
                caption='üì∏\u00A0–§–û–¢–û –¢–û–í–ê–†–ê\u00A0üì∏\n\n'
                        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ç–µ–∫—É—â–∏–µ <b>–≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ —Å POIZON (DEWU)</b>, '
                        '–∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å.\n\n'
                        '<i>–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è <b>—Ñ–æ—Ç–æ</b>, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ '
                        '<b>–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</b> –Ω–∞ <b>—Å–∫—Ä–∏–Ω—à–æ—Ç–∞—Ö.</b></i>',
            )
            photo_url_list = [
                'https://telegra.ph/file/12c8621e3564d8f6b8db0.png',
                'https://telegra.ph/file/44fc1c5234b526bab0e07.png',
                'https://telegra.ph/file/618617d9b7b5691821547.png'
            ]

            for photo_url in photo_url_list:
                album_builder.add_photo(media=photo_url)

            await message.answer_media_group(
                media=album_builder.build(),
                reply_markup=get_start_order_keyboard()
            )

            await state.set_state(ToOrderState.order_photo)
        else:
            raise InvalidURL
    except:
        await message.answer(
            text='‚ùå\u00A0<b>–ü–†–û–ò–ó–û–®–õ–ê –û–®–ò–ë–ö–ê</b>\u00A0‚ùå\n\n'
                 '–£–∫–∞–∑–∞–Ω–∞ <b>–Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è</b> —Å—Å—ã–ª–∫–∞. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç '
                 '<b>–ª–∏—à–Ω–∏–µ</b> –ø—Ä–æ–±–µ–ª—ã –∏–ª–∏ —Å–∏–º–≤–æ–ª—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ '
                 '—Å—Å—ã–ª–∫–∏ –∏ –≤–≤–µ–¥–∏—Ç–µ –µ—ë —Å–æ–≥–ª–∞—Å–Ω–æ <b>–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º—É —à–∞–±–ª–æ–Ω—É</b>.',
            reply_markup=get_start_order_keyboard()
        )


@router.message(
    ToOrderState.order_photo,
    F.photo
)
async def order_photo_received(message: Message, state: FSMContext) -> None:
    '''
    An async function to receive the order photo
    '''
    await state.update_data(order_photo=message.photo[-1].file_id)

    album_builder = MediaGroupBuilder(
        caption='üì∏\u00A0–†–ê–ó–ú–ï–† –¢–û–í–ê–†–ê\u00A0üì∏\n\n'
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π <b>—Ä–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ —Å POIZON (DEWU)</b>, '
                '–∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å.\n\n'
                '<i>–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è <b>—Ä–∞–∑–º–µ—Ä–∞</b>, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ '
                '<b>–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</b> –Ω–∞ <b>—Å–∫—Ä–∏–Ω—à–æ—Ç–∞—Ö.</b></i>'
    )
    photo_url_list = [
        'https://telegra.ph/file/a39274118a87db7937a20.png',
        'https://telegra.ph/file/252d52a9befb403186809.png',
    ]

    for photo_url in photo_url_list:
        album_builder.add_photo(media=photo_url)

    await message.answer_media_group(
        media=album_builder.build(),
        reply_markup=get_start_order_keyboard()
    )

    await state.set_state(ToOrderState.order_size)


@router.message(
    ToOrderState.order_photo
)
async def wrong_order_photo(message: Message) -> None:
    '''
    An async function to handle wrong order photo
    '''
    await message.answer(
        text='‚ùå\u00A0<b>–ü–†–û–ò–ó–û–®–õ–ê –û–®–ò–ë–ö–ê</b>\u00A0‚ùå\n\n'
             '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ <b>–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞</b> —Å <b>POIZON (DEWU)</b>.',
        reply_markup=get_start_order_keyboard()
    )


@router.message(
    ToOrderState.order_size,
    F.text.len() <= 10
)
async def order_size_received(message: Message, state: FSMContext) -> None:
    '''
    An async function to receive the order size
    '''
    await state.update_data(order_size=message.text)

    album_builder = MediaGroupBuilder(
        caption='üí¥\u00A0–¶–ï–ù–ê –¢–û–í–ê–†–ê –í –Æ–ê–ù–Ø–•\u00A0üí¥\n\n'
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é <b>—Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ —Å POIZON (DEWU)</b>, '
                '–∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å.\n\n'
                '<i>–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è <b>—Ü–µ–Ω—ã</b>, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ '
                '<b>–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</b> –Ω–∞ <b>—Å–∫—Ä–∏–Ω—à–æ—Ç–∞—Ö.</b></i>\n\n'
                '<b><u>–í–ê–ñ–ù–û:</u>–¢–û–í–ê–†–´ –° –ó–ù–ê–ö–û–ú ‚âà –ù–ï –ü–†–ò–ù–ò–ú–ê–Æ–¢–°–Ø –ö –ü–û–ö–£–ü–ö–ï. –ö–†–û–ú–ï '
                '–¢–û–ì–û, –ú–´ –ü–†–ò–ù–ò–ú–ê–ï–ú –¢–û–í–ê–†–´ –¢–û–õ–¨–ö–û –ü–û –¶–ï–ù–ï, –£–ö–ê–ó–ê–ù–ù–û–ô –ù–ê –¶–ï–ù–ù–ò–ö–ï –° '
                '–ó–ê–ß–ï–†–ö–ù–£–¢–û–ô –¶–ï–ù–û–ô.</b>'
    )
    photo_url_list = [
        'https://telegra.ph/file/edc832ea4a5988f75e09a.png',
        'https://telegra.ph/file/0827b05ded8b4e2b368b5.png',
    ]

    for photo_url in photo_url_list:
        album_builder.add_photo(media=photo_url)

    await message.answer_media_group(
        media=album_builder.build(),
        reply_markup=get_start_order_keyboard()
    )

    await state.set_state(ToOrderState.order_price)


@router.message(ToOrderState.order_size)
async def wrong_order_size(message: Message) -> None:
    '''
    An async function to handle wrong order size
    '''
    await message.answer(
        text='‚ùå\u00A0<b>–ü–†–û–ò–ó–û–®–õ–ê –û–®–ò–ë–ö–ê</b>\u00A0‚ùå\n\n'
             '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ <b>–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞</b> '
             '—Å <b>POIZON (DEWU)</b>.',
        reply_markup=get_start_order_keyboard()
    )


@router.message(
    ToOrderState.order_price,
    F.content_type != ContentType.SUCCESSFUL_PAYMENT,
    F.text.isdigit()
)
async def order_price_received(message: Message, state: FSMContext) -> None:
    '''
    An async function to receive the order price
    '''
    order_data = await state.get_data()
    user_data = await select_profile_data(message.from_user.id)
    rate, commission = await get_course_and_commission()

    if isinstance(rate, (int, float)) and isinstance(commission, (int, float)):
        full_price = int((int(message.text) * rate + commission))

        await message.answer_photo(
            photo=order_data['order_photo'],
            caption=f'üì¨\u00A0–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ó–ê–ö–ê–ó–ï\u00A0üì¨\n\n'
                    f'<b>–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä:</b> {order_data["order_url"]}\n'
                    f'<b>–†–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞:</b> {order_data["order_size"]}\n'
                    f'<b>–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Ö:</b> {message.text} —é–∞–Ω.\n'
                    f'<b>–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –≤ —Ä—É–±–ª—è—Ö:</b> {full_price} —Ä—É–±.\n\n'
                    f'ü¶π‚Äç‚ôÄÔ∏è\u00A0–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–õ–£–ß–ê–¢–ï–õ–ï\u00A0ü¶π‚Äç‚ôÄÔ∏è\n\n'
                    f'<b>–§–ò–û:</b> {user_data[1]} {user_data[0]} {user_data[2]}\n'
                    f'<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user_data[3]}\n'
                    f'<b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {user_data[4]}\n\n'
                    f'<i>–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ –≤–µ—Ä–Ω—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, '
                    f'–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" –∏ —Å–ª–µ–¥—É–π—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.</i>\n\n'
                    f'–ï—Å–ª–∏ —É –í–∞—Å <b>–≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–∫–∞–∑–æ–º –∏–ª–∏ –æ–ø–ª–∞—Ç–æ–π</b>, —Å–≤—è–∂–∏—Ç–µ—Å—å '
                    f'—Å –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –Ω–∞–∂–∞–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, –∏–ª–∏ '
                    f'–ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –Ω–∏–∂–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º:\n\n<b>E-mail:</b> theflash@gmail.com\n'
                    f'<b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b> @Kaverz1n',
            reply_markup=get_confirm_order_keyboard(),
        )

        await state.update_data(yuan_price=int(message.text))
        await state.update_data(rub_price=full_price)

    else:
        await message.answer(
            text='‚ùå\u00A0<b>–†–ê–°–ß–Å–¢ –¶–ï–ù–´ –¢–û–í–ê–†–ê –ù–ï–í–´–ü–û–õ–ù–ï–ù</b>\u00A0‚ùå\n\n'
                 '–ü—Ä–æ–∏–∑–æ—à–ª–∞ <b>–æ—à–∏–±–∫–∞</b> –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ <b>—Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞</b>. '
                 '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ</b>.',
            reply_markup=get_return_to_menu_keyboard(),
        )


@router.message(
    ToOrderState.order_price,
    F.content_type != ContentType.SUCCESSFUL_PAYMENT
)
async def wrong_order_price(message: Message) -> None:
    '''
    An async function to handle wrong order price
    '''
    await message.answer(
        text='‚ùå\u00A0<b>–ü–†–û–ò–ó–û–®–õ–ê –û–®–ò–ë–ö–ê</b>\u00A0‚ùå\n\n'
             '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ <b>–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ –∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Ö</b> '
             '—Å <b>POIZON (DEWU)</b>.',
        reply_markup=get_start_order_keyboard()
    )


@router.callback_query(F.data == 'confirm_order')
async def confirm_order(callback: CallbackQuery, state: FSMContext, bot: Bot) -> None:
    '''
    An async function to pay for an order
    '''
    order_data = await state.get_data()

    await bot.send_invoice(
        chat_id=callback.from_user.id,
        title='‚ö°\u00A0–ó–∞–∫–∞–∑ —Å POIZON by THE FLASH\u00A0‚ö°',
        description='–î–ª—è –æ–ø–ª–∞—Ç—ã –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–Ω–æ–ø–∫–æ–π. '
                    '–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –≤–∞—à –∑–∞–∫–∞–∑ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω '
                    '–Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏!\n\n'
                    'üíñ\u00A0–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±–∏—Ä–∞–µ—Ç–µ –Ω–∞—Å!\u00A0\u00A0üíñ\n\n'
                    '‚ö°–ë—ã—Å—Ç—Ä–æ - –ù–∞–¥—ë–∂–Ω–æ - –ú–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω–æ‚ö°',
        provider_token=os.getenv('PAYMENT_PROVIDER_TOKEN'),
        currency='rub',
        prices=[
            LabeledPrice(
                label='‚ö°\u00A0–ó–∞–∫–∞–∑ —Å POIZON by THE FLASH\u00A0‚ö°',
                amount=order_data['rub_price'] * 10
            )
        ],
        max_tip_amount=500 * 100,
        suggested_tip_amounts=[100 * 100, 200 * 100, 300 * 100, 400 * 100],
        start_parameter='TheFlash',
        provider_data=None,
        photo_url=os.getenv('FULL_LOGO_URL'),
        photo_size=512,
        photo_width=512,
        photo_height=512,
        need_name=False,
        need_phone_number=False,
        need_email=False,
        need_shipping_address=False,
        send_phone_number_to_provider=False,
        send_email_to_provider=False,
        is_flexible=False,
        disable_notification=False,
        protect_content=True,
        reply_to_message_id=None,
        allow_sending_without_reply=True,
        reply_markup=get_payment_keyboard(),
        request_timeout=15,
        payload='the_flash_invoice',

    )


@router.pre_checkout_query()
async def pre_checkout_query(pre_checkout_query: PreCheckoutQuery, bot: Bot) -> None:
    '''
    An async function to handle pre checkout query
    '''
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


@router.message(
    ToOrderState.order_price,
    F.content_type == ContentType.SUCCESSFUL_PAYMENT
)
async def successful_payment(message: Message, state: FSMContext) -> None:
    '''
    An async function to show successful payment message
    '''
    user_pk = await select_user_pk(user_telegram_id=message.from_user.id)
    order_data = await state.get_data()

    await state.clear()

    await insert_order_data(
        order_url=order_data['order_url'], yuan_price=order_data['yuan_price'],
        rub_price=order_data['rub_price'], order_photo_id=order_data['order_photo'],
        order_size=order_data['order_size'], user_id=user_pk[0],
        chat_telegram_id=message.chat.id
    )

    await increase_current_orders(message.from_user.id)

    await message.answer(
        text='üßæ\u00A0–í–ê–® –ó–ê–ö–ê–ó –û–ü–õ–ê–ß–ï–ù\u00A0üßæ\n\n'
             '–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –≤ <b>–ö–∏—Ç–∞–µ</b> —Å–∫–æ—Ä–æ –≤—ã–∫—É–ø–∏—Ç —Ç–æ–≤–∞—Ä —Å <b>POIZON (DEWU)</b> '
             '–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç –µ–≥–æ –≤ <b>–†–æ—Å—Å–∏—é</b>. –ö–∞–∫ —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏–∑ <b>–ú–æ—Å–∫–≤—ã</b> '
             '–Ω–∞ –≤–∞—à –∞–¥—Ä–µ—Å –ø—É–Ω–∫—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è <b>–°–î–≠–ö</b>, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ <b>—Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä</b>.\n\n'
             'üíñ\u00A0–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±–∏—Ä–∞–µ—Ç–µ –Ω–∞—Å!\u00A0\u00A0üíñ\n\n'
             '‚ö°–ë—ã—Å—Ç—Ä–æ - –ù–∞–¥—ë–∂–Ω–æ - –ú–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω–æ‚ö°',
        reply_markup=get_return_to_menu_keyboard()
    )
