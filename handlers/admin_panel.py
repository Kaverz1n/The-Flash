import os

from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, ReplyKeyboardRemove, FSInputFile

from callback_factories.order_factory import OrderCallbackFactory
from database.database_handlers.admin import insert_admin_data, get_admins_telegram_ids, delete_from_admins, \
    select_admin_password
from database.database_handlers.maintenance_mode import get_maintenance_mode_value, set_maintenance_mode_value
from database.database_handlers.orders import get_order_inf, update_order_status
from database.database_handlers.rates import get_rate_and_commission, update_rate, update_commission
from database.database_handlers.users import cancel_user_order
from handlers.start import return_main_menu
from keyboards.for_admin_panel import get_admin_panel_keyboard, get_back_admin_keyboard, get_check_orders_keyboard, \
    change_order_status_keyboard
from keyboards.for_back import get_back_keyboard
from keyboards.for_start import get_return_to_menu_keyboard
from states.admin_panel import AdminPanelState, AdminChangeRateState, AdminChangeCommissionState, AdminAddAdminState, \
    AdminDeleteAdminState, AdminCheckOrdersState
from utils import create_order_inf_file

router = Router()


@router.callback_query(F.data == 'admin_panel')
async def admin_panel(callback: CallbackQuery, state: FSMContext) -> None:
    '''
    A handler for the entering to admin panel
    '''
    await callback.message.answer(
        text='ü•∑\u00A0–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø\u00A0ü•∑\n\n'
             '–î–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:',
        reply_markup=get_back_keyboard()
    )

    await state.set_state(AdminPanelState.password)


@router.message(
    F.text,
    AdminPanelState.password
)
async def admin_password_received(message: Message, state: FSMContext) -> None:
    '''
    A handler for admin panel
    '''
    admin_telegram_id = message.from_user.id
    admin_password = await select_admin_password(admin_telegram_id)

    if message.text == admin_password:
        maintenance_mode = await get_maintenance_mode_value()
        await message.answer(
            text='ü•∑\u00A0–ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨\u00A0ü•∑\n\n'
                 '–í—ã –≤–æ—à–ª–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å. –ß—Ç–æ –¥–µ–ª–∞–µ–º —Å–µ–≥–æ–¥–Ω—è: ',
            reply_markup=get_admin_panel_keyboard(maintenance_mode, message.from_user.id)
        )
        await state.set_state(AdminPanelState.authorized)
    else:
        await message.answer(
            text='‚ùå\u00A0<b>–ü–†–û–ò–ó–û–®–õ–ê –û–®–ò–ë–ö–ê</b>\u00A0‚ùå\n\n'
                 '–í–æ –≤—Ä–µ–º—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:',
            reply_markup=get_return_to_menu_keyboard()
        )


@router.message(AdminPanelState.password)
async def wrong_admin_password(message: Message) -> None:
    '''
    A handler for wrong admin password
    '''
    await message.answer(
        text='‚ùå\u00A0<b>–ü–†–û–ò–ó–û–®–õ–ê –û–®–ò–ë–ö–ê</b>\u00A0‚ùå\n\n'
             '–í–æ –≤—Ä–µ–º—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:',
        reply_markup=get_return_to_menu_keyboard()
    )


@router.message(
    F.text == 'üì¶\u00A0–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑—ã\u00A0üì¶',
    AdminPanelState.authorized
)
async def current_orders(message: Message, state: FSMContext) -> None:
    '''
    A handler for choosing an action with orders
    '''
    await message.answer(
        text='üì¶\u00A0–í–´–ë–ï–†–ò–¢–ï –û–ü–¶–ò–Æ\u00A0üì¶\n\n'
             '–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –≤–∞–º –æ–ø—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É:',
        reply_markup=get_check_orders_keyboard()
    )

    await state.set_state(AdminCheckOrdersState.get_orders_inf)


@router.message(
    F.text == 'üóÇÔ∏è\u00A0–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–∞—Ö\u00A0üóÇÔ∏è',
    AdminCheckOrdersState.get_orders_inf
)
async def get_excel_orders_data(message: Message) -> None:
    '''
    A handler for getting excel orders data
    '''
    await create_order_inf_file()

    excel_file = FSInputFile('templates/excel_template.xlsx')

    await message.answer_document(
        excel_file,
        caption='üóÇÔ∏è\u00A0–î–ê–ù–ù–´–ï –û –ó–ê–ö–ê–ó–ê–•\u00A0üóÇÔ∏è\n\n'
                '–î–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –≤–∏–¥–µ <b>Excel-—Ç–∞–±–ª–∏—Ü—ã</b>. '
                '–î–∞–Ω–Ω—ã–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã –ø–æ <b>—Å—Ç–∞—Ç—É—Å—É</b> –∑–∞–∫–∞–∑–∞ <b>"–°–æ–∑–¥–∞–Ω"</b>.'
    )


@router.message(
    F.text == 'üõí\u00A0–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∑–∞–∫–∞–∑—É\u00A0üõí',
    AdminCheckOrdersState.get_orders_inf
)
async def get_order_data(message: Message, state: FSMContext) -> None:
    '''
    A handler for getting order data
    '''
    await message.answer(
        text='üõí\u00A0–í–´–ë–û–† –ó–ê–ö–ê–ó–ê\u00A0üõí\n\n'
             '–î–ª—è –≤—ã–±–æ—Ä–∞ <b>–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞</b> —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ <b>ID</b>: ',
        reply_markup=ReplyKeyboardRemove()
    )

    await state.set_state(AdminCheckOrdersState.order_id)


@router.message(
    F.text.isdigit(),
    AdminCheckOrdersState.order_id
)
async def order_id_received(message: Message) -> None:
    '''
    A handler showing the order data
    '''
    try:
        order_id = int(message.text)
        order_data = await get_order_inf(order_id)

        await message.answer_photo(
            photo=order_data[4],
            caption=f'üì¨\u00A0–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ó–ê–ö–ê–ó–ï\u00A0üì¨\n\n'
                    f'<b>ID —Ç–æ–≤–∞—Ä–∞:</b> {order_data[0]}\n'
                    f'<b>–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä:</b> {order_data[1]}\n'
                    f'<b>–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Ö:</b> {order_data[2]} —é–∞–Ω.\n'
                    f'<b>–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –≤ —Ä—É–±–ª—è—Ö:</b> {order_data[3]} —Ä—É–±.\n'
                    f'<b>–†–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞:</b> {order_data[5]}\n\n'
                    f'<b>Telegram ID –∑–∞–∫–∞–∑—á–∏–∫–∞:</b> {order_data[6]}\n'
                    f'<b>Telegram ID —á–∞—Ç–∞:</b> {order_data[7]}\n\n'
                    f'<b>–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞:</b> {order_data[8]}\n',
            reply_markup=change_order_status_keyboard(order_data[8], order_data[0], order_data[6], order_data[7])
        )
    except IndexError:
        await message.answer(
            text='‚ùå\u00A0<b>–ü–†–û–ò–ó–û–®–õ–ê –û–®–ò–ë–ö–ê</b>\u00A0‚ùå\n\n'
                 '–í–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:'
        )


@router.message(
    AdminCheckOrdersState.order_id
)
async def wrong_order_id(message: Message) -> None:
    '''
    A handler for wrong order id
    '''
    await message.answer(
        text='‚ùå\u00A0<b>–ü–†–û–ò–ó–û–®–õ–ê –û–®–ò–ë–ö–ê</b>\u00A0‚ùå\n\n'
             '–í–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:'
    )


@router.callback_query(OrderCallbackFactory.filter(F.action == '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å'))
async def ship_order(callback: CallbackQuery, callback_data: OrderCallbackFactory, bot: Bot) -> None:
    '''
    A handler for informing about order shipment
    '''
    await update_order_status(callback_data.order_id, '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω')

    await bot.send_message(
        chat_id=callback_data.user_chat_telegram_id,
        text=f'‚úÖ\u00A0–ó–ê–ö–ê–ó ‚Ññ{callback_data.order_id} –û–¢–ü–†–ê–í–õ–ï–ù\u00A0‚úÖ\n\n'
             f'–î–ª—è <b>–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è</b> –∑–∞–∫–∞–∑–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–µ—Ä–≤–∏—Å–∞–º–∏ '
             f'<a href="https://www.cdek.ru/">CDEK</a> –∏–ª–∏ –∏–Ω—ã–º <b>–≤—ã–±—Ä–∞–Ω—ã–º</b> –≤–∞–º–∏ —Å–µ—Ä–≤–∏—Å–æ–º.'
    )

    await callback.answer()


@router.callback_query(OrderCallbackFactory.filter(F.action == '–æ—Ç–º–µ–Ω–∏—Ç—å'))
async def cancel_order(callback: CallbackQuery, callback_data: OrderCallbackFactory, bot: Bot):
    '''
    A handler for informing about order cancellation
    '''
    await update_order_status(callback_data.order_id, '–û—Ç–º–µ–Ω–µ–Ω')

    await bot.send_message(
        chat_id=callback_data.user_chat_telegram_id,
        text=f'‚ùå\u00A0–ó–ê–ö–ê–ó ‚Ññ{callback_data.order_id} –û–¢–ú–ï–ù–ï–ù\u00A0‚ùå\n\n'
             f'–î–ª—è –≤—ã—è—Å–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å '
             f'—Å –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –Ω–∞–∂–∞–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, –∏–ª–∏ '
             f'–ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –Ω–∏–∂–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º:\n\n<b>E-mail:</b> theflash@gmail.com\n'
             f'<b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b> @Kaverz1n'
    )

    await cancel_user_order(callback_data.user_telegram_id)

    await callback.answer()


@router.message(
    F.text == 'üí¥\u00A0–ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å —é–∞–Ω—è\u00A0üí¥',
    AdminPanelState.authorized
)
async def change_rate_admin(message: Message, state: FSMContext) -> None:
    '''
    A handler for changing the rate
    '''
    course = (await get_rate_and_commission())[0]

    await message.answer(
        text='üí¥\u00A0–ò–ó–ú–ï–ù–ï–ù–ò–ï –ö–£–†–°–ê –Æ–ê–ù–Ø\u00A0üí¥\n\n'
             f'<b>–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å —é–∞–Ω—è</b>: {round(course, 2)} —Ä—É–±.\n\n'
             f'–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:',
        reply_markup=get_back_admin_keyboard()
    )

    await state.set_state(AdminChangeRateState.rate)


@router.message(
    AdminChangeRateState.rate
)
async def rate_admin_received(message: Message, state: FSMContext) -> None:
    '''
    A handler for receiving the rate
    '''
    try:
        cny_rate = float(message.text)
        await update_rate(cny_rate)
        await state.set_state(AdminPanelState.authorized)
        await message.answer(
            text='‚úÖ\u00A0<b>–ö–£–†–° –Æ–ê–ù–Ø –£–°–ü–ï–®–ù–û –ò–ó–ú–ï–ù–Å–ù</b>\u00A0‚úÖ\n\n'
                 f'–ö—É—Ä—Å —é–∞–Ω—è <b>–∏–∑–º–µ–Ω—ë–Ω</b> –∏ <b>—Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç</b>: {round(cny_rate, 2)} —Ä—É–±.\n\n'
                 f'–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤ <b>–∞–¥–º–∏–Ω. –ø–∞–Ω–µ–ª–∏</b>, –∏—Å–ø–æ–ª—å–∑—É—è <b>—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏</b>.',

        )
    except:
        await message.answer(
            text='‚ùå\u00A0<b>–ü–†–û–ò–ó–û–®–õ–ê –û–®–ò–ë–ö–ê</b>\u00A0‚ùå\n\n'
                 '–í–æ –≤—Ä–µ–º—è –≤–≤–æ–¥–∞ <b>–Ω–æ–≤–æ–≥–æ</b> –∫—É—Ä—Å–∞ —é–∞–Ω—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. '
                 '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–ø–æ–ø—Ä–æ–±—É–π—Ç–µ</b> –µ—â–µ —Ä–∞–∑:',
            reply_markup=get_back_admin_keyboard()
        )


@router.message(
    F.text == 'üíµ\u00A0–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é\u00A0üíµ',
    AdminPanelState.authorized
)
async def change_commission_admin(message: Message, state: FSMContext) -> None:
    '''
    A handler for changing the commission
    '''
    commission = (await get_rate_and_commission())[1]

    await message.answer(
        text='üíµ\u00A0–ò–ó–ú–ï–ù–ï–ù–ò–ï –ö–û–ú–ò–°–°–ò–ò –°–ï–†–í–ò–°–ê\u00A0üíµ\n\n'
             f'<b>–¢–µ–∫—É—â–∞—è –∫–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞</b>: {round(commission, 2)} —Ä—É–±.\n\n'
             f'–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:',
        reply_markup=get_back_admin_keyboard()
    )

    await state.set_state(AdminChangeCommissionState.commission)


@router.message(
    AdminChangeCommissionState.commission
)
async def commission_admin_received(message: Message, state: FSMContext) -> None:
    '''
    A handler for receiving the commission
    '''
    try:
        commission = float(message.text)
        await update_commission(commission)
        await state.set_state(AdminPanelState.authorized)
        await message.answer(
            text='‚úÖ\u00A0<b>–ö–û–ú–ò–°–°–ò–Ø –°–ï–†–í–ò–°–ê –£–°–ü–ï–®–ù–û –ò–ó–ú–ï–ù–ï–ù–ê</b>\u00A0‚úÖ\n\n'
                 f'–ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞ <b>–∏–∑–º–µ–Ω–µ–Ω–∞</b> –∏ <b>—Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç</b>: {round(commission, 2)} —Ä—É–±.\n\n'
                 f'–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤ <b>–∞–¥–º–∏–Ω. –ø–∞–Ω–µ–ª–∏</b>, –∏—Å–ø–æ–ª—å–∑—É—è <b>—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏</b>.',
        )
    except:
        await message.answer(
            text='‚ùå\u00A0<b>–ü–†–û–ò–ó–û–®–õ–ê –û–®–ò–ë–ö–ê</b>\u00A0‚ùå\n\n'
                 '–í–æ –≤—Ä–µ–º—è –≤–≤–æ–¥–∞ <b>–Ω–æ–≤–æ–π</b> –∫–æ–º–∏—Å—Å–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. '
                 '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–ø–æ–ø—Ä–æ–±—É–π—Ç–µ</b> –µ—â–µ —Ä–∞–∑:',
            reply_markup=get_back_admin_keyboard()
        )


@router.message(
    F.text == 'ü•∑\u00A0–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞\u00A0ü•∑',
    AdminPanelState.authorized
)
async def add_telegram_id_admin(message: Message, state: FSMContext) -> None:
    '''
    A handler for adding a new admin's telegram ID
    '''
    await message.answer(
        text='ü•∑\u00A0–î–û–ë–ê–í–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê\u00A0ü•∑\n\n'
             f'–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ <b>—Ç–µ–ª–µ–≥—Ä–∞–º ID</b>:',
        reply_markup=get_back_admin_keyboard()
    )

    await state.set_state(AdminAddAdminState.admin_telegram_id)


@router.message(
    F.text.isdigit(),
    AdminAddAdminState.admin_telegram_id
)
async def add_password_admin(message: Message, state: FSMContext) -> None:
    '''
    A handler for adding a new admin's password
    '''
    await state.update_data(admin_telegram_id=int(message.text))

    await message.answer(
        text='ü•∑\u00A0–î–û–ë–ê–í–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê\u00A0ü•∑\n\n'
             f'–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ <b>–ø–∞—Ä–æ–ª—å</b>:',
        reply_markup=get_back_admin_keyboard()
    )

    await state.set_state(AdminAddAdminState.admin_password)


@router.message(
    AdminAddAdminState.admin_telegram_id
)
async def wrong_add_telegram_id_admin(message: Message) -> None:
    '''
    A handler for wrong admin's telegram ID
    '''
    await message.answer(
        text='‚ùå\u00A0<b>–ü–†–û–ò–ó–û–®–õ–ê –û–®–ò–ë–ö–ê</b>\u00A0‚ùå\n\n'
             '–í–æ –≤—Ä–µ–º—è –≤–≤–æ–¥–∞ <b>—Ç–µ–ª–µ–≥—Ä–∞–º ID</b> –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. '
             '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–ø–æ–ø—Ä–æ–±—É–π—Ç–µ</b> –µ—â–µ —Ä–∞–∑:',
        reply_markup=get_back_admin_keyboard()
    )


@router.message(
    F.text,
    AdminAddAdminState.admin_password
)
async def admin_data_received(message: Message, state: FSMContext) -> None:
    '''
    A handler for receiving admin data
    '''
    admin_data = await state.get_data()
    admin_telegram_id = admin_data['admin_telegram_id']
    admin_password = message.text

    await insert_admin_data(admin_telegram_id, admin_password)

    await message.answer(
        text='‚úÖ\u00A0<b>–ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–† –î–û–ë–ê–í–õ–ï–ù</b>\u00A0‚úÖ\n\n'
             f'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ <b>–¥–æ–±–∞–≤–ª–µ–Ω</b> –∏ –º–æ–∂–µ—Ç <b>–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è</b>.\n\n'
             f'–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤ <b>–∞–¥–º–∏–Ω. –ø–∞–Ω–µ–ª–∏</b>, –∏—Å–ø–æ–ª—å–∑—É—è <b>—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏</b>.',
    )

    await state.set_state(AdminPanelState.authorized)


@router.message(
    AdminAddAdminState.admin_password
)
async def wrong_add_password_admin(message: Message) -> None:
    '''
    A handler for wrong admin's password
    '''
    await message.answer(
        text='‚ùå\u00A0<b>–ü–†–û–ò–ó–û–®–õ–ê –û–®–ò–ë–ö–ê</b>\u00A0‚ùå\n\n'
             '–í–æ –≤—Ä–µ–º—è –≤–≤–æ–¥–∞ <b>–ø–∞—Ä–æ–ª—è</b> –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. '
             '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–ø–æ–ø—Ä–æ–±—É–π—Ç–µ</b> –µ—â–µ —Ä–∞–∑:',
        reply_markup=get_back_admin_keyboard()
    )


@router.message(
    F.text == 'üßü‚Äç‚ôÇÔ∏è\u00A0–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞\u00A0üßü‚Äç‚ôÇÔ∏è',
    AdminPanelState.authorized
)
async def delete_admin(message: Message, state: FSMContext) -> None:
    '''
    A handler for deleting an admin
    '''
    await message.answer(
        text='üßü‚Äç\u00A0–£–î–ê–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê\u00A0üßü‚Äç\n\n'
             f'–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ <b>—Ç–µ–ª–µ–≥—Ä–∞–º ID</b>:',
        reply_markup=get_back_admin_keyboard()
    )

    await state.set_state(AdminDeleteAdminState.admin_telegram_id)


@router.message(
    F.text.isdigit(),
    AdminDeleteAdminState.admin_telegram_id
)
async def delete_admin_data_received(message: Message, state: FSMContext) -> None:
    '''
    A handler for receiving admin data for deletion
    '''
    admin_telegram_id = int(message.text)
    admins_telegram_ids = await get_admins_telegram_ids()
    main_admin_telegram_id = os.getenv('MAIN_ADMIN_TELEGRAM_ID')

    # checking if the user is an admin and not the main admin
    if admin_telegram_id in admins_telegram_ids and admin_telegram_id != main_admin_telegram_id:
        await delete_from_admins(admin_telegram_id)

        await message.answer(
            text='‚úÖ\u00A0<b>–ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–† –£–î–ê–õ–Å–ù</b>\u00A0‚úÖ\n\n'
                 f'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ <b>—É–¥–∞–ª—ë–Ω</b> –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é <b>–∫–æ–º–∞–Ω–¥—ã</b>.\n\n'
                 f'–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤ <b>–∞–¥–º–∏–Ω. –ø–∞–Ω–µ–ª–∏</b>, –∏—Å–ø–æ–ª—å–∑—É—è <b>—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏</b>.',
        )

        await state.set_state(AdminPanelState.authorized)

    else:
        await message.answer(
            text='‚ùå\u00A0<b>–ü–†–û–ò–ó–û–®–õ–ê –û–®–ò–ë–ö–ê</b>\u00A0‚ùå\n\n'
                 '–í–æ –≤—Ä–µ–º—è <b>—É–¥–∞–ª–µ–Ω–∏—è</b> –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. '
                 '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–ø–æ–ø—Ä–æ–±—É–π—Ç–µ</b> –µ—â–µ —Ä–∞–∑:',
            reply_markup=get_back_admin_keyboard()
        )


@router.message(
    AdminDeleteAdminState.admin_telegram_id
)
async def wrong_delete_admin_data(message: Message, state: FSMContext) -> None:
    '''
    A handler for wrong admin data
    '''
    await message.answer(
        text='‚ùå\u00A0<b>–ü–†–û–ò–ó–û–®–õ–ê –û–®–ò–ë–ö–ê</b>\u00A0‚ùå\n\n'
             '–í–æ –≤—Ä–µ–º—è <b>—É–¥–∞–ª–µ–Ω–∏—è</b> –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. '
             '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–ø–æ–ø—Ä–æ–±—É–π—Ç–µ</b> –µ—â–µ —Ä–∞–∑:',
        reply_markup=get_back_admin_keyboard()
    )


@router.message(
    F.text == 'üîß\u00A0–í–∫–ª. —Ä–µ–∂–∏–º —Ç–µ—Ö.–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è\u00A0üîß',
    AdminPanelState.authorized
)
async def on_maintenance_mode(message: Message) -> None:
    '''
    A handler for turning on maintenance mode
    '''
    await set_maintenance_mode_value(True)

    await message.answer(
        text='üîß\u00A0<b>–†–ï–ñ–ò–ú –¢–ï–•. –û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–Ø –í–ö–õ–Æ–ß–ï–ù</b>\u00A0üîß\n\n'
             f'–†–µ–∂–∏–º —Ç–µ—Ö.–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è <b>–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</b>. –í—ã –º–æ–∂–µ—Ç–µ <b>–≤—ã–∫–ª—é—á–∏—Ç—å</b> '
             f'–µ–≥–æ –≤ <b>–∞–¥–º–∏–Ω. –ø–∞–Ω–µ–ª–∏</b>.\n\n'
             f'–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤ <b>–∞–¥–º–∏–Ω. –ø–∞–Ω–µ–ª–∏</b>, –∏—Å–ø–æ–ª—å–∑—É—è <b>—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏</b>.',
        reply_markup=get_admin_panel_keyboard(maintenance_mode=True, admin_telegram_id=message.from_user.id)
    )


@router.message(
    F.text == 'üîß\u00A0–í—ã–∫–ª. —Ä–µ–∂–∏–º —Ç–µ—Ö.–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è\u00A0üîß',
    AdminPanelState.authorized
)
async def off_maintenance_mode(message: Message) -> None:
    '''
    A handler for turning off maintenance mode
    '''
    await set_maintenance_mode_value(False)

    await message.answer(
        text='üîß\u00A0<b>–†–ï–ñ–ò–ú –¢–ï–•. –û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–Ø –í–´–ö–õ–Æ–ß–ï–ù</b>\u00A0üîß\n\n'
             f'–†–µ–∂–∏–º —Ç–µ—Ö.–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è <b>–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</b>. –í—ã –º–æ–∂–µ—Ç–µ <b>–≤–∫–ª—é—á–∏—Ç—å</b> '
             f'–µ–≥–æ –≤ <b>–∞–¥–º–∏–Ω. –ø–∞–Ω–µ–ª–∏</b>.\n\n'
             f'–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤ <b>–∞–¥–º–∏–Ω. –ø–∞–Ω–µ–ª–∏</b>, –∏—Å–ø–æ–ª—å–∑—É—è <b>—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏</b>.',
        reply_markup=get_admin_panel_keyboard(maintenance_mode=False, admin_telegram_id=message.from_user.id)
    )


@router.message(
    F.text == 'üö™\u00A0–í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω. –ø–∞–Ω–µ–ª–∏\u00A0üö™',
    AdminPanelState.authorized
)
async def exit_admin_panel(message: Message, state: FSMContext) -> None:
    '''
    A handler for exiting the admin panel
    '''
    await message.answer(text='–í—ã—Ö–æ–¥...', reply_markup=ReplyKeyboardRemove())

    await return_main_menu(message, state)


@router.callback_query(
    F.data == 'back_to_admin',
)
async def back_to_admin(callback: CallbackQuery, state: FSMContext, bot: Bot) -> None:
    '''
    A handler for going back to the admin panel
    '''
    await state.set_state(AdminPanelState.authorized)

    maintenance_mode = await get_maintenance_mode_value()
    admin_id = callback.from_user.id

    await bot.delete_message(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id
    )

    await callback.message.answer(
        text='ü•∑\u00A0–ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨\u00A0ü•∑\n\n'
             '–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤ <b>–∞–¥–º–∏–Ω. –ø–∞–Ω–µ–ª–∏</b>, –∏—Å–ø–æ–ª—å–∑—É—è <b>—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏</b>.',
        reply_markup=get_admin_panel_keyboard(maintenance_mode, admin_id)
    )
    await callback.answer()


@router.message(
    F.text == 'ü•∑\u00A0–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω. –ø–∞–Ω–µ–ª—å\u00A0ü•∑',
    AdminCheckOrdersState.get_orders_inf
)
async def back_to_admin(message: Message, state: FSMContext, bot: Bot) -> None:
    '''
    A handler for going back to the admin panel
    '''
    await state.set_state(AdminPanelState.authorized)

    await bot.delete_message(
        chat_id=message.chat.id,
        message_id=message.message_id
    )

    maintenance_mode = await get_maintenance_mode_value()

    await message.answer(
        text='ü•∑\u00A0–ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨\u00A0ü•∑\n\n'
             '–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤ <b>–∞–¥–º–∏–Ω. –ø–∞–Ω–µ–ª–∏</b>, –∏—Å–ø–æ–ª—å–∑—É—è <b>—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏</b>.',
        reply_markup=get_admin_panel_keyboard(maintenance_mode, message.from_user.id)
    )
