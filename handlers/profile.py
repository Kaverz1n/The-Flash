from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from database.database_handlers.users import select_profile_data, update_profile_data
from keyboards.for_back import get_back_keyboard
from keyboards.for_profile import get_profile_keyboard, get_edit_profile_keyboard, get_back_to_profile_keyboard, \
    get_back_to_edit_keyboard
from keyboards.for_start import get_return_to_menu_keyboard
from states.profile import ProfileState
from utils import is_correct_address

router = Router()


@router.callback_query(F.data == 'profile')
async def profile(callback: CallbackQuery, state: FSMContext) -> None:
    '''
    A handler for showing user's profile data
    '''
    state = await state.get_state()
    user_telegram_id = callback.from_user.id
    profile_data = await select_profile_data(user_telegram_id)
    profile_filling = {}

    for data in profile_data:
        profile_filling[data] = '‚úÖ' if data != '–ù–µ —É–∫–∞–∑–∞–Ω' else '‚ùå'

    await callback.message.answer(
        text='ü¶π‚Äç‚ôÄÔ∏è\u00A0–í–ê–® –ü–†–û–§–ò–õ–¨\u00A0ü¶π‚Äç‚ôÄÔ∏è\n\n'
             f'‚úÖ\u00A0<b>Id</b>: {user_telegram_id}\n'
             f'{profile_filling[profile_data[0]]}\u00A0<b>–ò–º—è</b>: {profile_data[0]}\n'
             f'{profile_filling[profile_data[1]]}\u00A0<b>–§–∞–º–∏–ª–∏—è</b>: {profile_data[1]}\n'
             f'{profile_filling[profile_data[2]]}\u00A0<b>–û—Ç—á–µ—Å—Ç–≤–æ</b>: {profile_data[2]}\n'
             f'{profile_filling[profile_data[3]]}\u00A0<b>–¢–µ–ª–µ—Ñ–æ–Ω</b>: {profile_data[3]}\n'
             f'{profile_filling[profile_data[4]]}\u00A0<b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</b>: {profile_data[4]}\n\n'
             f'<b>–¢–µ–∫—É—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤</b>: {profile_data[5]}\n'
             f'<b>–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤</b>: {profile_data[6]}\n'
             f'<b>–û—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤</b>: {profile_data[7]}\n\n',
        reply_markup=get_profile_keyboard(state=state)
    )
    await callback.answer()


@router.callback_query(F.data == 'edit_profile')
async def edit_profile(callback: CallbackQuery, state: FSMContext) -> None:
    '''
    A handler for editing user's profile data
    '''
    await state.clear()

    await callback.message.answer(
        text='üë∂Ô∏è\u00A0<b>–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–§–ò–õ–Ø</b>\u00A0üë¥Ô∏è\n\n'
             '–î–ª—è <b>–∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö</b> –≤–∞—à–µ–≥–æ <b>–ø—Ä–æ—Ñ–∏–ª—è</b> –≤—ã–±–µ—Ä–∏—Ç–µ <b>–∫–Ω–æ–ø–∫—É</b>, '
             '–æ—Ç–≤–µ—á–∞—é—â—É—é –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ <b>–ø–æ–ª—è</b>. –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å '
             '<b>–æ–¥–Ω–æ</b> –∏–ª–∏ <b>–Ω–µ—Å–∫–æ–ª—å–∫–æ</b> –ø–æ–ª–µ–π. –î–ª—è <b>–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</b> –∏–∑–º–µ–Ω–µ–Ω–∏–π '
             '–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>"–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"</b>.',
        reply_markup=get_edit_profile_keyboard()
    )

    await callback.answer()


@router.callback_query(F.data == 'user_name')
async def user_name(callback: CallbackQuery, state: FSMContext) -> None:
    '''
    A handler for editing user's name
    '''
    await callback.message.answer(
        text='‚úèÔ∏è\u00A0–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ò–ú–ï–ù–ò\u00A0‚úèÔ∏è\n\n'
             '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –í–∞—à–µ <b>–ø–æ–ª–Ω–æ–µ –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏–º—è</b>. –û–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ '
             '–¥–ª—è <b>–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞</b>:',
        reply_markup=get_back_to_edit_keyboard()
    )
    await callback.answer()

    await state.set_state(ProfileState.user_name)


@router.message(
    ProfileState.user_name,
    F.text.isalpha(),
    F.text.len() <= 20
)
async def user_name_changed(message: Message, state: FSMContext) -> None:
    '''
    A handler for successful user's name change
    '''
    await state.update_data(user_name=message.text)

    await message.answer(
        text='‚úÖ\u00A0<b>–ò–ú–Ø –£–°–ü–ï–®–ù–û –ò–ó–ú–ï–ù–ï–ù–û</b>\u00A0‚úÖ\n\n'
             '–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å <b>—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</b> —Å–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ <b>—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Ö</b>.',
        reply_markup=get_edit_profile_keyboard(button_key='–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è')
    )


@router.message(ProfileState.user_name)
async def wrong_user_name_value(message: Message) -> None:
    '''
    A handler for showing an error message if the entered user's name is not alphabet
    '''
    await message.answer(
        text='‚ùó<b>–û–®–ò–ë–ö–ê</b>‚ùó\n\n'
             '–í–≤–µ–¥—ë–Ω–Ω–æ–µ –∏–º—è <b>–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ</b>. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É</b>:',
        reply_markup=get_back_to_profile_keyboard()
    )


@router.callback_query(F.data == 'user_surname')
async def user_surname(callback: CallbackQuery, state: FSMContext) -> None:
    '''
    A handler for editing user's surname
    '''
    await callback.message.answer(
        text='‚úèÔ∏è\u00A0<b>–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –§–ê–ú–ò–õ–ò–ò</b>\u00A0‚úèÔ∏è\n\n'
             '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –í–∞—à—É <b>–Ω–∞—Å—Ç–æ—è—â—É—é —Ñ–∞–º–∏–ª–∏—é</b>. –û–Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ '
             '–¥–ª—è <b>–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞</b>:',
        reply_markup=get_back_to_edit_keyboard()
    )
    await callback.answer()

    await state.set_state(ProfileState.user_surname)


@router.message(
    ProfileState.user_surname,
    F.text.isalpha(),
    F.text.len() <= 20
)
async def user_surname_changed(message: Message, state: FSMContext) -> None:
    '''
    A handler for successful user's surname change
    '''
    await state.update_data(user_surname=message.text)

    await message.answer(
        text='‚úÖ\u00A0<b>–§–ê–ú–ò–õ–ò–Ø –£–°–ü–ï–®–ù–û –ò–ó–ú–ï–ù–ï–ù–ê</b>\u00A0‚úÖ\n\n'
             '–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å <b>—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</b> —Å–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ <b>—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Ö</b>.',
        reply_markup=get_edit_profile_keyboard(button_key='–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é')
    )


@router.message(ProfileState.user_surname)
async def wrong_user_surname_value(message: Message) -> None:
    '''
    A handler for showing an error message if the entered user's surname is not alphabet
    '''
    await message.answer(
        text='‚ùó<b>–û–®–ò–ë–ö–ê</b>‚ùó\n\n'
             '–í–≤–µ–¥—ë–Ω–Ω–∞—è —Ñ–∞–º–∏–ª–∏—è <b>–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞</b>. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É</b>:',
        reply_markup=get_back_to_profile_keyboard()
    )


@router.callback_query(F.data == 'user_patronymic')
async def user_patronymic(callback: CallbackQuery, state: FSMContext) -> None:
    '''
    A handler for editing user's patronymic
    '''
    await callback.message.answer(
        text='‚úèÔ∏è\u00A0<b>–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –û–¢–ß–ï–°–¢–í–ê</b>\u00A0‚úèÔ∏è\n\n'
             '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –í–∞—à–µ <b>–Ω–∞—Å—Ç–æ—è—â–µ–µ –æ—Ç—á–µ—Å—Ç–≤–æ</b>. –û–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ '
             '–¥–ª—è <b>–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞</b>:',
        reply_markup=get_back_to_edit_keyboard()
    )
    await callback.answer()

    await state.set_state(ProfileState.user_patronymic)


@router.message(
    ProfileState.user_patronymic,
    F.text.isalpha(),
    F.text.len() <= 20
)
async def user_patronymic_changed(message: Message, state: FSMContext) -> None:
    '''
    A handler for successful user's patronymic change
    '''
    await state.update_data(user_patronymic=message.text)

    await message.answer(
        text='‚úÖ\u00A0<b>–û–¢–ß–ï–°–¢–í–û –£–°–ü–ï–®–ù–û –ò–ó–ú–ï–ù–ï–ù–û</b>\u00A0‚úÖ\n\n'
             '–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å <b>—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</b> —Å–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ <b>—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Ö</b>.',
        reply_markup=get_edit_profile_keyboard(button_key='–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç—á–µ—Å—Ç–≤–æ')
    )


@router.message(ProfileState.user_patronymic)
async def wrong_user_patronymic_value(message: Message) -> None:
    '''
    A handler for showing an error message if the entered user's patronymic is not alphabet
    '''
    await message.answer(
        text='‚ùó<b>–û–®–ò–ë–ö–ê</b>‚ùó\n\n'
             '–í–≤–µ–¥—ë–Ω–Ω–æ–µ –æ—Ç—á–µ—Å—Ç–≤–æ <b>–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ</b>. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É</b>:',
        reply_markup=get_back_to_profile_keyboard()
    )


@router.callback_query(F.data == 'user_phone')
async def user_phone(callback: CallbackQuery, state: FSMContext) -> None:
    '''
    A handler for editing user's phone
    '''
    await callback.message.answer(
        text='‚úèÔ∏è\u00A0<b>–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ù–û–ú–ï–†–ê –¢–ï–õ–ï–§–û–ù–ê</b>\u00A0‚úèÔ∏è\n\n'
             '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –í–∞—à <b>—Ç–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> –≤ —Ñ–æ—Ä–º–∞—Ç–µ '
             '<b>+79999999999</b>. –û–Ω –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è <b>–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞</b>:',
        reply_markup=get_back_to_edit_keyboard()
    )
    await callback.answer()

    await state.set_state(ProfileState.user_phone)


@router.message(
    ProfileState.user_phone,
    F.text.startswith('+'),
    F.text[1:].isdigit(),
    F.text.len() <= 15
)
async def user_phone_changed(message: Message, state: FSMContext) -> None:
    '''
    A handler for successful user's phone change
    '''
    await state.update_data(user_phone=message.text)

    await message.answer(
        text='‚úÖ\u00A0<b>–ù–û–ú–ï–† –¢–ï–õ–ï–§–û–ù–ê –£–°–ü–ï–®–ù–û –ò–ó–ú–ï–ù–ï–ù</b>\u00A0‚úÖ\n\n'
             '–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å <b>—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</b> —Å–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ <b>—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Ö</b>.',
        reply_markup=get_edit_profile_keyboard(button_key='–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω')
    )


@router.message(ProfileState.user_phone)
async def wrong_user_phone_value(message: Message) -> None:
    '''
    A handler for showing an error message if the entered user's phone is not digits
    '''
    await message.answer(
        text='‚ùó<b>–û–®–ò–ë–ö–ê</b>‚ùó\n\n'
             '–í–≤–µ–¥—ë–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ <b>–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω</b>. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É</b>:',
        reply_markup=get_back_to_profile_keyboard()
    )


@router.callback_query(F.data == 'delivery_address')
async def delivery_address(callback: CallbackQuery, state: FSMContext) -> None:
    '''
    A handler for editing user's delivery address
    '''
    await callback.message.answer(
        text='‚úèÔ∏è\u00A0<b>–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ê–î–†–ï–°–ê –ü–£–ù–ö–¢–ê –í–´–î–ê–ß–ò –ó–ê–ö–ê–ó–û–í</b>\u00A0‚úèÔ∏è\n\n'
             '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <b>–∞–¥—Ä–µ—Å –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏ –∑–∞–∫–∞–∑–æ–≤</b> –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '
             '<i>–ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å, —Å—Ç—Ä–∞–Ω–∞, –æ–±–ª–∞—Å—Ç—å, –≥–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º</i> - <b>—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é</b>. '
             '–û–Ω –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è <b>–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞</b>.\n\n'
             '–ù–∞–ø—Ä–∏–º–µ—Ä: <i>248021, –†–æ—Å—Å–∏—è, –ö–∞–ª—É–∂—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –ö–∞–ª—É–≥–∞, –ì–ª–∞–≥–æ–ª–µ–≤–∞, 2–ê</i>\n\n'
             '<b>–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø—Ä–∏–º–µ—Ä–æ–º, –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∫–æ—Ä–ø—É—Å–æ–≤, —Å—Ç—Ä–æ–µ–Ω–∏–π –∏ —Ç.–¥. '
             '–ö—Ä–æ–º–µ —Ç–æ–≥–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –ø—Ä–∏–º–µ—Ä—É –∏ –æ—Å—Ç–∞–≤—å—Ç–µ –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã —Ç–∞–∫, '
             '–∫–∞–∫ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã.</b>\n\n'
             '<i>–£–∫–∞–∑–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –ø—Ä–∏–º–µ–Ω–∏–º —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –†–æ—Å—Å–∏—é. –ï—Å–ª–∏ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –∑–∞ '
             '–ø—Ä–µ–¥–µ–ª–∞–º–∏ –†–æ—Å—Å–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–º –¥–∞–Ω–Ω—ã–º, '
             '—É–∫–∞–∑–∞–Ω–Ω—ã–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ –∫–æ–º–ø–∞–Ω–∏–∏, –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.</i>',
        reply_markup=get_back_to_edit_keyboard()
    )
    await callback.answer()

    await state.set_state(ProfileState.delivery_address)


@router.message(ProfileState.delivery_address, F.text.split(',').len() == 6)
async def delivery_address_changed(message: Message, state: FSMContext) -> None:
    '''
    A handler for successful delivery address change
    '''
    is_current_address = await is_correct_address(
        city_post_code=message.text.split(', ')[0],
        delivery_address=message.text
    )

    if is_current_address:
        await state.update_data(delivery_address=message.text)
        await message.answer(
            text='‚úÖ\u00A0<b>–ê–î–†–ï–° –ü–£–ù–ö–¢–ê –í–´–î–ê–ß–ò –ó–ê–ö–ê–ó–û–í –£–°–ü–ï–®–ù–û –ò–ó–ú–ï–ù–ï–ù</b>\u00A0‚úÖ\n\n'
                 '–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å <b>—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</b> —Å–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ <b>—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Ö</b>.',
            reply_markup=get_edit_profile_keyboard(button_key='–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å')
        )
    else:
        await message.answer(
            text='‚ùó<b>–ü–£–ù–ö–¢ –í–´–î–ê–ß–ò CDEK –ù–ï –ù–ê–òÃÜ–î–ï–ù</b>‚ùó\n\n'
                 '–ê–¥—Ä–µ—Å –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏ <b>CDEK</b>, –≤–≤–µ–¥–µ–Ω–Ω—ã–π –≤–∞–º–∏, <b>–Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω</b>. '
                 '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ <b>–∞–¥—Ä–µ—Å</b> –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å '
                 '<b>–º–∞—Å–∫–æ–π –≤–≤–æ–¥–∞</b>. –ï—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ <b>–∞–¥—Ä–µ—Å</b> –≤–≤–µ–¥–µ–Ω '
                 '<b>–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ</b>, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ <b>—Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b> –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã.'
        )


@router.message(ProfileState.delivery_address)
async def wrong_delivery_address_value(message: Message) -> None:
    '''
    A handler for showing an error message if the entered delivery address is not correct
    '''
    await message.answer(
        text='‚ùó<b>–û–®–ò–ë–ö–ê</b>‚ùó\n\n'
             '–í–≤–µ–¥—ë–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏ –∑–∞–∫–∞–∑–æ–≤ <b>–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω</b>. '
             '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É</b>:',
        reply_markup=get_back_to_profile_keyboard()
    )


@router.callback_query(F.data == 'save_profile')
async def save_profile(callback: CallbackQuery, state: FSMContext) -> None:
    '''
    A handler for saving user's profile data
    '''
    user_telegram_id = callback.from_user.id
    user_nickname = callback.from_user.username

    profile_data = await select_profile_data(user_telegram_id)

    user_data = {
        'user_telegram_id': user_telegram_id,
        'user_nickname': user_nickname,
        'user_name': profile_data[0],
        'user_surname': profile_data[1],
        'user_patronymic': profile_data[2],
        'user_phone': profile_data[3],
        'delivery_address': profile_data[4],
    }

    saving_data = await state.get_data()

    for key, value in saving_data.items():
        user_data[key] = value

    await update_profile_data(**user_data)

    await callback.message.answer(
        text='‚úÖ\u00A0<b>–î–ê–ù–ù–´–ï –£–°–ü–ï–®–ù–û –°–û–•–†–ê–ù–ï–ù–´</b>\u00A0‚úÖ\n\n'
             '–í–∞—à–∏ <b>–Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ</b> –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –í–∞—à–µ–º <b>–ø—Ä–æ—Ñ–∏–ª–µ</b>. –í—ã –º–æ–∂–µ—Ç–µ '
             '<b>–∏–∑–º–µ–Ω–∏—Ç—å</b> –∏—Ö <b>—Å–Ω–æ–≤–∞</b> –≤ —Å–ª—É—á–∞–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.',
        reply_markup=get_return_to_menu_keyboard(),
    )

    await callback.answer(
        text='–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã\u00A0‚úèÔ∏è',
        show_alert=True
    )


@router.callback_query(F.data == 'back_to_edit_profile')
async def back_to_edit_profile(callback: CallbackQuery, bot: Bot, state: FSMContext) -> None:
    '''
    A handler for to get back to edit the profile
    '''
    await bot.delete_message(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id
    )
    await callback.answer()
