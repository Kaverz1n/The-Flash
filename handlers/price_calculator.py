from aiogram import Router, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from database.database_handlers.rates import get_rate_and_commission
from keyboards.for_back import get_back_keyboard
from keyboards.for_start import get_return_to_menu_keyboard
from states.price_calculator import PriceCalculatorState

router = Router()


@router.callback_query(StateFilter(None), F.data == 'price_calculator')
async def price_calculator(callback: CallbackQuery, state: FSMContext) -> None:
    '''
    A handler for calculating the good's price
    '''
    await state.clear()
    await callback.message.answer(
        text='üí¥\u00A0<b>–ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† –°–¢–û–ò–ú–û–°–¢–ò –¢–û–í–ê–†–ê</b>\u00A0üí¥\n\n'
             '–í–≤–µ–¥–∏—Ç–µ <b>—Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Ö</b>, —á—Ç–æ–±—ã –Ω–∞—à –±–æ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–ª <b>–ø–æ–ª–Ω—É—é</b> '
             '—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ <b>—Ä—É–±–ª—è—Ö</b> —Å —É—á–µ—Ç–æ–º <b>–∫–æ–º–∏—Å—Å–∏–∏</b> –∏ <b>–¥–æ—Å—Ç–∞–≤–∫–∏</b> '
             '–¥–æ <b>–ú–æ—Å–∫–≤—ã</b>:',
        reply_markup=get_back_keyboard(),
    )
    await callback.answer()
    await state.set_state(PriceCalculatorState.price)


@router.message(PriceCalculatorState.price, F.text.isdigit())
async def price_calculated(message: Message, state: FSMContext) -> None:
    '''
    A handler for showing converted good's price
    '''
    rate, commission = await get_rate_and_commission()

    if isinstance(rate, (int, float)) and isinstance(commission, (int, float)):
        full_price = int((int(message.text) * rate + commission))
        await message.answer(
            text='‚úÖ\u00A0<b>–†–ê–°–ß–Å–¢ –¶–ï–ù–´ –¢–û–í–ê–†–ê –í–´–ü–û–õ–ù–ï–ù</b>\u00A0‚úÖ\n\n'
                 f'–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ —Å —É—á–µ—Ç–æ–º <b>–∫–æ–º–∏—Å—Å–∏–∏</b> –∏ <b>–¥–æ—Å—Ç–∞–≤–∫–∏</b> –¥–æ '
                 f'<b>–ú–æ—Å–∫–≤—ã</b> –≤ <b>—Ä—É–±–ª—è—Ö</b> —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: <b>{full_price} —Ä—É–±.</b>',
            reply_markup=get_return_to_menu_keyboard(),
        )
    else:
        await message.answer(
            text='‚ùå\u00A0<b>–†–ê–°–ß–Å–¢ –¶–ï–ù–´ –¢–û–í–ê–†–ê –ù–ï–í–´–ü–û–õ–ù–ï–ù</b>\u00A0‚ùå\n\n'
                 '–ü—Ä–æ–∏–∑–æ—à–ª–∞ <b>–æ—à–∏–±–∫–∞</b> –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ <b>—Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞</b>. '
                 '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ</b>.',
            reply_markup=get_return_to_menu_keyboard(),
        )

    await state.clear()


@router.message(PriceCalculatorState.price)
async def wrong_price_calculator_value(message: Message) -> None:
    '''
    A handler for showing an error message if the entered price is not integer
    '''
    await message.answer(
        text='‚ùó<b>–û–®–ò–ë–ö–ê</b>‚ùó\n\n'
             '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <b>–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ</b> –∏ <b>—Ü–µ–ª–æ–µ</b> '
             '—á–∏—Å–ª–æ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞ –≤ <b>—é–∞–Ω—è—Ö</b>:',
        reply_markup=get_return_to_menu_keyboard(),
    )
